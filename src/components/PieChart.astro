---
const { data } = Astro.props;

function processData(data: Record<string, number>) {
  const labels: string[] = [];
  const values: number[] = [];
  let otherCount = 0;

  for (const [key, value] of Object.entries(data)) {
    if (value === 1) {
      otherCount += 1;
    } else {
      labels.push(key.charAt(0).toUpperCase() + key.slice(1)); // Capitalize first character
      values.push(value);
    }
  }

  if (otherCount > 0) {
    labels.push("Other");
    values.push(otherCount);
  }

  return { labels, values };
}

const chartData = processData(data);
---

<canvas
  id="pie-chart"
  style="width: 100%; height: 100%;"
  data-chart={JSON.stringify(chartData)}></canvas>

<script>
  import { Chart, PieController, ArcElement, Tooltip, Legend } from "chart.js";

  // Function to get the value of a CSS variable
  function getCSSCustomPropertyValue(name: string) {
    return getComputedStyle(document.documentElement)
      .getPropertyValue(name)
      .trim();
  }

  // Register required Chart.js components
  Chart.register(PieController, ArcElement, Tooltip, Legend);

  // Get the chart element and parse the data from the data-chart attribute
  const chartElement = document.getElementById(
    "pie-chart"
  ) as HTMLCanvasElement;
  const chartData = JSON.parse(chartElement.dataset.chart);

  // Function to load images and create patterns
  async function createPatterns() {
    const ctx = chartElement.getContext("2d");

    // Disable image smoothing to maintain pixelated appearance
    ctx.imageSmoothingEnabled = false;

    const patterns = [];
    const numSectors = chartData.labels.length;

    // Calculate which pattern indices to use with maximum spacing
    const patternIndices = [];
    if (numSectors === 1) {
      patternIndices.push(1);
    } else {
      for (let i = 0; i < numSectors; i++) {
        const index = Math.round((i * 13) / (numSectors - 1)) + 1; // Spread across 1-14
        patternIndices.push(index);
      }
    }

    // Load only the patterns we need
    for (const index of patternIndices) {
      const img = new Image();
      img.src = `/images/pattern_${index}.png`;

      await new Promise((resolve) => {
        img.onload = () => {
          const pattern = ctx.createPattern(img, "repeat");
          patterns.push(pattern);
          resolve(pattern);
        };
      });
    }

    return patterns;
  }

  // Create the chart after patterns are loaded
  createPatterns().then((patterns) => {
    const chart = new Chart(chartElement, {
      type: "pie",
      data: {
        labels: chartData.labels,
        datasets: [
          {
            data: chartData.values,
            backgroundColor: patterns, // Use all loaded patterns
            borderColor: "#ccc9c5",
            borderWidth: 1,
          },
        ],
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: {
            position: "right",
            labels: {
              color: getCSSCustomPropertyValue("--color-text-primary"),
              font: {
                family: "JetBrains Mono, monospace",
                size: 14,
              },
            },
          },
          tooltip: {
            titleFont: {
              family: "JetBrains Mono, monospace",
            },
            bodyFont: {
              family: "JetBrains Mono, monospace",
            },
            callbacks: {
              label: function (context) {
                const label = context.label || "";
                const value = context.raw || 0;
                return `${label}: ${value}`;
              },
            },
          },
        },
      },
    });

    // Set up a MutationObserver to listen for changes to the <html> element's class attribute
    const observer = new MutationObserver(() => {
      // Update the legend text color dynamically
      chart.options.plugins.legend.labels.color = getCSSCustomPropertyValue(
        "--color-text-primary"
      );
      chart.update();
    });

    // Observe the <html> element for class attribute changes
    observer.observe(document.documentElement, {
      attributes: true,
      attributeFilter: ["class"],
    });
  });
</script>
