---
import TOCHeading from "./TOCHeading.astro";

const { headings, selector = "h2[id], h3[id]" } = Astro.props;

// github.com/rezahedi/rezahedi.dev/blob/main/src/components/TOC.astro
function buildHierarchy(headings: any) {
  const toc: any[] = [];
  const parentHeadings = new Map();

  if (!headings) return toc;

  headings.forEach((h: any) => {
    const heading = { ...h, subheadings: [] };
    parentHeadings.set(heading.depth, heading);
    // Change 2 to 1 if your markdown includes your <h1>
    if (heading.depth === 2) {
      toc.push(heading);
    } else {
      parentHeadings.get(heading.depth - 1).subheadings.push(heading);
    }
  });
  return toc;
}

let toc = buildHierarchy(headings);
---

<>
  {
    toc && toc.length > 0 && (
      <nav
        id="table-of-contents"
        aria-label="Table of contents"
        class="sticky top-0 p-4 max-h-screen overflow-y-auto"
        data-selector={selector}
      >
        <details open>
          <summary class="flex items-center gap-4 text-lg tracking-wide variable-font-wdth-83 uppercase cursor-default">
            <svg
              width="10"
              height="10"
              viewBox="0 0 10 10"
              xmlns="http://www.w3.org/2000/svg"
              aria-hidden="true"
            >
              <polyline
                points="3,1 7,5 3,9"
                fill="none"
                stroke="currentColor"
                stroke-width="1.6"
              />
            </svg>
            <span>On this page</span>
          </summary>
          <ul class="flex-grow text-sm variable-font-wdth-90 mt-4 pl-4">
            {toc.map((heading) => (
              <TOCHeading heading={heading} />
            ))}
          </ul>
        </details>
      </nav>
    )
  }
  <script>
    document.addEventListener("DOMContentLoaded", () => {
      const tocElement = document.getElementById("table-of-contents");
      const detailsElement = tocElement.querySelector("details");
      const isLargeScreen = window.innerWidth >= 768;
      // We only really care about the saved preference on small screens
      if (!isLargeScreen) {
        const preferredState =
          localStorage.getItem("tocState") ??
          (isLargeScreen ? "open" : "closed");
        detailsElement.open = preferredState === "open";
      }

      const updateTocState = () => {
        const isOpen = detailsElement.open;
        localStorage.setItem("tocState", isOpen ? "open" : "closed");
      };

      detailsElement.addEventListener("toggle", updateTocState);

      const selector = tocElement?.getAttribute("data-selector");

      const observerOptions = {
        root: null,
        rootMargin: "0px 0px -80% 0px",
        threshold: 0.8,
      };

      let lastActiveLink: Element | null = null;

      const observerCallback = (entries) => {
        entries.forEach((entry) => {
          const tocItem = document.querySelector(
            `a[href="#${entry.target.id}"]`,
          );
          if (entry.isIntersecting) {
            if (lastActiveLink) {
              lastActiveLink.classList.remove("active");
            }
            tocItem?.classList.add("active");
            lastActiveLink = tocItem;
          }
        });
      };

      const observer = new IntersectionObserver(
        observerCallback,
        observerOptions,
      );

      const headings = document.querySelectorAll(selector || "h2[id], h3[id]");
      headings.forEach((heading) => observer.observe(heading));
    });
  </script>
  <style>
    summary::-webkit-details-marker {
      display: none;
    }

    summary svg {
      transition: transform 0.2s ease;
    }

    details[open] summary svg {
      transform: rotate(90deg);
    }
  </style>
</>
